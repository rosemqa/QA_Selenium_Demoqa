{"uid":"39934c0337415a9d","name":"test_check_boxes","fullName":"tests.test_elements.TestCheckBox#test_check_boxes","historyId":"e02f4593f499a927533521fb7368ab44","time":{"start":1727299546100,"stop":1727299549826,"duration":3726},"description":"Titles of ticked checkboxes match the output results","descriptionHtml":"<p>Titles of ticked checkboxes match the output results</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"rct-checkbox\">...</span> is not clickable at point (483, 985). Other element would receive the click: <iframe frameborder=\"0\" src=\"https://08e1cde8623929261096483800149714.safeframe.googlesyndication.com/safeframe/1-0-40/html/container.html\" id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_0\" title=\"3rd party ad content\" name=\"\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" width=\"728\" height=\"90\" data-is-safeframe=\"true\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" allow=\"private-state-token-redemption\" aria-label=\"Advertisement\" tabindex=\"0\" data-google-container-id=\"6\" style=\"border: 0px; vertical-align: bottom; max-height: 30vh !important; overflow: hidden !important; display: block; margin: 0px auto;\" data-load-complete=\"true\"></iframe>\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x55ba76b8e10a <unknown>\n#1 0x55ba768745e0 <unknown>\n#2 0x55ba768ca866 <unknown>\n#3 0x55ba768c878d <unknown>\n#4 0x55ba768c6237 <unknown>\n#5 0x55ba768c5646 <unknown>\n#6 0x55ba768b8a98 <unknown>\n#7 0x55ba768e8b22 <unknown>\n#8 0x55ba768b8478 <unknown>\n#9 0x55ba768e8cee <unknown>\n#10 0x55ba76907d7d <unknown>\n#11 0x55ba768e88c3 <unknown>\n#12 0x55ba768b66b3 <unknown>\n#13 0x55ba768b768e <unknown>\n#14 0x55ba76b58b0b <unknown>\n#15 0x55ba76b5ca91 <unknown>\n#16 0x55ba76b45305 <unknown>\n#17 0x55ba76b5d612 <unknown>\n#18 0x55ba76b2a46f <unknown>\n#19 0x55ba76b7d008 <unknown>\n#20 0x55ba76b7d1d3 <unknown>\n#21 0x55ba76b8cf5c <unknown>\n#22 0x7f6db72e4144 <unknown>","statusTrace":"self = <test_elements.TestElements.TestCheckBox object at 0x7f1b7b9f0230>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7d18dde6c117a1bb94805cf24684a54c\")>\n\n    @allure.description('Titles of ticked checkboxes match the output results')\n    def test_check_boxes(self, driver):\n        page = CheckBoxPage(driver, URL.CHECK_BOX)\n        page.open_page()\n    \n        page.click_expand_all_button()\n>       page.click_random_checkboxes()\n\ntests/test_elements.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/elements_page.py:81: in click_random_checkboxes\n    random_checkbox.click()\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1b7b857e00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55ba76b7d1d3 \\\\u003Cunknown>\\\\n#21 0x55ba76b8cf5c \\\\u003Cunknown>\\\\n#22 0x7f6db72e4144 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"rct-checkbox\">...</span> is not clickable at point (483, 985). Other element would receive the click: <iframe frameborder=\"0\" src=\"https://08e1cde8623929261096483800149714.safeframe.googlesyndication.com/safeframe/1-0-40/html/container.html\" id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_0\" title=\"3rd party ad content\" name=\"\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" width=\"728\" height=\"90\" data-is-safeframe=\"true\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" allow=\"private-state-token-redemption\" aria-label=\"Advertisement\" tabindex=\"0\" data-google-container-id=\"6\" style=\"border: 0px; vertical-align: bottom; max-height: 30vh !important; overflow: hidden !important; display: block; margin: 0px auto;\" data-load-complete=\"true\"></iframe>\nE         (Session info: chrome=129.0.6668.58)\nE       Stacktrace:\nE       #0 0x55ba76b8e10a <unknown>\nE       #1 0x55ba768745e0 <unknown>\nE       #2 0x55ba768ca866 <unknown>\nE       #3 0x55ba768c878d <unknown>\nE       #4 0x55ba768c6237 <unknown>\nE       #5 0x55ba768c5646 <unknown>\nE       #6 0x55ba768b8a98 <unknown>\nE       #7 0x55ba768e8b22 <unknown>\nE       #8 0x55ba768b8478 <unknown>\nE       #9 0x55ba768e8cee <unknown>\nE       #10 0x55ba76907d7d <unknown>\nE       #11 0x55ba768e88c3 <unknown>\nE       #12 0x55ba768b66b3 <unknown>\nE       #13 0x55ba768b768e <unknown>\nE       #14 0x55ba76b58b0b <unknown>\nE       #15 0x55ba76b5ca91 <unknown>\nE       #16 0x55ba76b45305 <unknown>\nE       #17 0x55ba76b5d612 <unknown>\nE       #18 0x55ba76b2a46f <unknown>\nE       #19 0x55ba76b7d008 <unknown>\nE       #20 0x55ba76b7d1d3 <unknown>\nE       #21 0x55ba76b8cf5c <unknown>\nE       #22 0x7f6db72e4144 <unknown>\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1727299511656,"stop":1727299511681,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1727299545730,"stop":1727299546099,"duration":369},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Titles of ticked checkboxes match the output results","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"rct-checkbox\">...</span> is not clickable at point (483, 985). Other element would receive the click: <iframe frameborder=\"0\" src=\"https://08e1cde8623929261096483800149714.safeframe.googlesyndication.com/safeframe/1-0-40/html/container.html\" id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_0\" title=\"3rd party ad content\" name=\"\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" width=\"728\" height=\"90\" data-is-safeframe=\"true\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" allow=\"private-state-token-redemption\" aria-label=\"Advertisement\" tabindex=\"0\" data-google-container-id=\"6\" style=\"border: 0px; vertical-align: bottom; max-height: 30vh !important; overflow: hidden !important; display: block; margin: 0px auto;\" data-load-complete=\"true\"></iframe>\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x55ba76b8e10a <unknown>\n#1 0x55ba768745e0 <unknown>\n#2 0x55ba768ca866 <unknown>\n#3 0x55ba768c878d <unknown>\n#4 0x55ba768c6237 <unknown>\n#5 0x55ba768c5646 <unknown>\n#6 0x55ba768b8a98 <unknown>\n#7 0x55ba768e8b22 <unknown>\n#8 0x55ba768b8478 <unknown>\n#9 0x55ba768e8cee <unknown>\n#10 0x55ba76907d7d <unknown>\n#11 0x55ba768e88c3 <unknown>\n#12 0x55ba768b66b3 <unknown>\n#13 0x55ba768b768e <unknown>\n#14 0x55ba76b58b0b <unknown>\n#15 0x55ba76b5ca91 <unknown>\n#16 0x55ba76b45305 <unknown>\n#17 0x55ba76b5d612 <unknown>\n#18 0x55ba76b2a46f <unknown>\n#19 0x55ba76b7d008 <unknown>\n#20 0x55ba76b7d1d3 <unknown>\n#21 0x55ba76b8cf5c <unknown>\n#22 0x7f6db72e4144 <unknown>","statusTrace":"self = <test_elements.TestElements.TestCheckBox object at 0x7f1b7b9f0230>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7d18dde6c117a1bb94805cf24684a54c\")>\n\n    @allure.description('Titles of ticked checkboxes match the output results')\n    def test_check_boxes(self, driver):\n        page = CheckBoxPage(driver, URL.CHECK_BOX)\n        page.open_page()\n    \n        page.click_expand_all_button()\n>       page.click_random_checkboxes()\n\ntests/test_elements.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/elements_page.py:81: in click_random_checkboxes\n    random_checkbox.click()\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1b7b857e00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55ba76b7d1d3 \\\\u003Cunknown>\\\\n#21 0x55ba76b8cf5c \\\\u003Cunknown>\\\\n#22 0x7f6db72e4144 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"rct-checkbox\">...</span> is not clickable at point (483, 985). Other element would receive the click: <iframe frameborder=\"0\" src=\"https://08e1cde8623929261096483800149714.safeframe.googlesyndication.com/safeframe/1-0-40/html/container.html\" id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_0\" title=\"3rd party ad content\" name=\"\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" width=\"728\" height=\"90\" data-is-safeframe=\"true\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" allow=\"private-state-token-redemption\" aria-label=\"Advertisement\" tabindex=\"0\" data-google-container-id=\"6\" style=\"border: 0px; vertical-align: bottom; max-height: 30vh !important; overflow: hidden !important; display: block; margin: 0px auto;\" data-load-complete=\"true\"></iframe>\nE         (Session info: chrome=129.0.6668.58)\nE       Stacktrace:\nE       #0 0x55ba76b8e10a <unknown>\nE       #1 0x55ba768745e0 <unknown>\nE       #2 0x55ba768ca866 <unknown>\nE       #3 0x55ba768c878d <unknown>\nE       #4 0x55ba768c6237 <unknown>\nE       #5 0x55ba768c5646 <unknown>\nE       #6 0x55ba768b8a98 <unknown>\nE       #7 0x55ba768e8b22 <unknown>\nE       #8 0x55ba768b8478 <unknown>\nE       #9 0x55ba768e8cee <unknown>\nE       #10 0x55ba76907d7d <unknown>\nE       #11 0x55ba768e88c3 <unknown>\nE       #12 0x55ba768b66b3 <unknown>\nE       #13 0x55ba768b768e <unknown>\nE       #14 0x55ba76b58b0b <unknown>\nE       #15 0x55ba76b5ca91 <unknown>\nE       #16 0x55ba76b45305 <unknown>\nE       #17 0x55ba76b5d612 <unknown>\nE       #18 0x55ba76b2a46f <unknown>\nE       #19 0x55ba76b7d008 <unknown>\nE       #20 0x55ba76b7d1d3 <unknown>\nE       #21 0x55ba76b8cf5c <unknown>\nE       #22 0x7f6db72e4144 <unknown>\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Open https://demoqa.com/checkbox page","time":{"start":1727299546100,"stop":1727299548615,"duration":2515},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Click Expand All button","time":{"start":1727299548615,"stop":1727299548692,"duration":77},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Click several random checkboxes","time":{"start":1727299548692,"stop":1727299549825,"duration":1133},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"rct-checkbox\">...</span> is not clickable at point (483, 985). Other element would receive the click: <iframe frameborder=\"0\" src=\"https://08e1cde8623929261096483800149714.safeframe.googlesyndication.com/safeframe/1-0-40/html/container.html\" id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-300x250_0\" title=\"3rd party ad content\" name=\"\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" width=\"728\" height=\"90\" data-is-safeframe=\"true\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" allow=\"private-state-token-redemption\" aria-label=\"Advertisement\" tabindex=\"0\" data-google-container-id=\"6\" style=\"border: 0px; vertical-align: bottom; max-height: 30vh !important; overflow: hidden !important; display: block; margin: 0px auto;\" data-load-complete=\"true\"></iframe>\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x55ba76b8e10a <unknown>\n#1 0x55ba768745e0 <unknown>\n#2 0x55ba768ca866 <unknown>\n#3 0x55ba768c878d <unknown>\n#4 0x55ba768c6237 <unknown>\n#5 0x55ba768c5646 <unknown>\n#6 0x55ba768b8a98 <unknown>\n#7 0x55ba768e8b22 <unknown>\n#8 0x55ba768b8478 <unknown>\n#9 0x55ba768e8cee <unknown>\n#10 0x55ba76907d7d <unknown>\n#11 0x55ba768e88c3 <unknown>\n#12 0x55ba768b66b3 <unknown>\n#13 0x55ba768b768e <unknown>\n#14 0x55ba76b58b0b <unknown>\n#15 0x55ba76b5ca91 <unknown>\n#16 0x55ba76b45305 <unknown>\n#17 0x55ba76b5d612 <unknown>\n#18 0x55ba76b2a46f <unknown>\n#19 0x55ba76b7d008 <unknown>\n#20 0x55ba76b7d1d3 <unknown>\n#21 0x55ba76b8cf5c <unknown>\n#22 0x7f6db72e4144 <unknown>\n\n","statusTrace":"  File \"/usr/local/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/test_project/pages/elements_page.py\", line 81, in click_random_checkboxes\n    random_checkbox.click()\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"122f2582993b5c28","name":"stdout","source":"122f2582993b5c28.txt","type":"text/plain","size":36}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1727299549898,"stop":1727299550104,"duration":206},"status":"passed","steps":[],"attachments":[{"uid":"36b0d00090fe8769","name":"Screenshot 2024-09-25 21:25:50.030048","source":"36b0d00090fe8769.png","type":"image/png","size":351592}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"suite","value":"Elements"},{"name":"feature","value":"CheckBox"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestElements"},{"name":"host","value":"794a6e081e46"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_elements"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"39934c0337415a9d.json","parameterValues":[]}