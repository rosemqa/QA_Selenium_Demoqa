{"uid":"3a720b95de8b4088","name":"test_delete_one_value_from_multiselect","fullName":"tests.test_widgets.TestSelectMenu#test_delete_one_value_from_multiselect","historyId":"11510075669c03f4d5c995e5f2b67ad2","time":{"start":1727306192137,"stop":1727306194644,"duration":2507},"description":"Can delete a value from multiselect field","descriptionHtml":"<p>Can delete a value from multiselect field</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"css-xb97g8\">...</div> is not clickable at point (569, 857). Other element would receive the click: <div id=\"adplus-anchor\" data-google-query-id=\"CJXljoCd34gDFTEWigMdWjAS_A\">...</div>\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x558e98ffa10a <unknown>\n#1 0x558e98ce05e0 <unknown>\n#2 0x558e98d36866 <unknown>\n#3 0x558e98d3478d <unknown>\n#4 0x558e98d32237 <unknown>\n#5 0x558e98d31646 <unknown>\n#6 0x558e98d24a98 <unknown>\n#7 0x558e98d54b22 <unknown>\n#8 0x558e98d24478 <unknown>\n#9 0x558e98d54cee <unknown>\n#10 0x558e98d73d7d <unknown>\n#11 0x558e98d548c3 <unknown>\n#12 0x558e98d226b3 <unknown>\n#13 0x558e98d2368e <unknown>\n#14 0x558e98fc4b0b <unknown>\n#15 0x558e98fc8a91 <unknown>\n#16 0x558e98fb1305 <unknown>\n#17 0x558e98fc9612 <unknown>\n#18 0x558e98f9646f <unknown>\n#19 0x558e98fe9008 <unknown>\n#20 0x558e98fe91d3 <unknown>\n#21 0x558e98ff8f5c <unknown>\n#22 0x7f017d1e5144 <unknown>","statusTrace":"self = <test_widgets.TestWidgets.TestSelectMenu object at 0x7f38cd8e58e0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f36e4f2b5f3c3af3bf47cdf75b253d72\")>\n\n    @allure.description('Can delete a value from multiselect field')\n    def test_delete_one_value_from_multiselect(self, driver):\n        page = SelectMenuPage(driver, URL.SELECT_MENU)\n        page.open_page()\n    \n        page.select_multiple_colors()\n>       value_count_before, value_count_after = page.delete_one_value_from_multiselect()\n\ntests/test_widgets.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/widgets_page.py:253: in delete_one_value_from_multiselect\n    self.find_element(self.locators.MULTISELECT_REMOVE_ITEM_ICON).click()\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f38cd9215b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x558e98fe91d3 \\\\u003Cunknown>\\\\n#21 0x558e98ff8f5c \\\\u003Cunknown>\\\\n#22 0x7f017d1e5144 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"css-xb97g8\">...</div> is not clickable at point (569, 857). Other element would receive the click: <div id=\"adplus-anchor\" data-google-query-id=\"CJXljoCd34gDFTEWigMdWjAS_A\">...</div>\nE         (Session info: chrome=129.0.6668.58)\nE       Stacktrace:\nE       #0 0x558e98ffa10a <unknown>\nE       #1 0x558e98ce05e0 <unknown>\nE       #2 0x558e98d36866 <unknown>\nE       #3 0x558e98d3478d <unknown>\nE       #4 0x558e98d32237 <unknown>\nE       #5 0x558e98d31646 <unknown>\nE       #6 0x558e98d24a98 <unknown>\nE       #7 0x558e98d54b22 <unknown>\nE       #8 0x558e98d24478 <unknown>\nE       #9 0x558e98d54cee <unknown>\nE       #10 0x558e98d73d7d <unknown>\nE       #11 0x558e98d548c3 <unknown>\nE       #12 0x558e98d226b3 <unknown>\nE       #13 0x558e98d2368e <unknown>\nE       #14 0x558e98fc4b0b <unknown>\nE       #15 0x558e98fc8a91 <unknown>\nE       #16 0x558e98fb1305 <unknown>\nE       #17 0x558e98fc9612 <unknown>\nE       #18 0x558e98f9646f <unknown>\nE       #19 0x558e98fe9008 <unknown>\nE       #20 0x558e98fe91d3 <unknown>\nE       #21 0x558e98ff8f5c <unknown>\nE       #22 0x7f017d1e5144 <unknown>\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1727305957782,"stop":1727305957807,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1727306186972,"stop":1727306187301,"duration":329},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Can delete a value from multiselect field","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"css-xb97g8\">...</div> is not clickable at point (569, 857). Other element would receive the click: <div id=\"adplus-anchor\" data-google-query-id=\"CJXljoCd34gDFTEWigMdWjAS_A\">...</div>\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x558e98ffa10a <unknown>\n#1 0x558e98ce05e0 <unknown>\n#2 0x558e98d36866 <unknown>\n#3 0x558e98d3478d <unknown>\n#4 0x558e98d32237 <unknown>\n#5 0x558e98d31646 <unknown>\n#6 0x558e98d24a98 <unknown>\n#7 0x558e98d54b22 <unknown>\n#8 0x558e98d24478 <unknown>\n#9 0x558e98d54cee <unknown>\n#10 0x558e98d73d7d <unknown>\n#11 0x558e98d548c3 <unknown>\n#12 0x558e98d226b3 <unknown>\n#13 0x558e98d2368e <unknown>\n#14 0x558e98fc4b0b <unknown>\n#15 0x558e98fc8a91 <unknown>\n#16 0x558e98fb1305 <unknown>\n#17 0x558e98fc9612 <unknown>\n#18 0x558e98f9646f <unknown>\n#19 0x558e98fe9008 <unknown>\n#20 0x558e98fe91d3 <unknown>\n#21 0x558e98ff8f5c <unknown>\n#22 0x7f017d1e5144 <unknown>","statusTrace":"self = <test_widgets.TestWidgets.TestSelectMenu object at 0x7f38cd8e58e0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f36e4f2b5f3c3af3bf47cdf75b253d72\")>\n\n    @allure.description('Can delete a value from multiselect field')\n    def test_delete_one_value_from_multiselect(self, driver):\n        page = SelectMenuPage(driver, URL.SELECT_MENU)\n        page.open_page()\n    \n        page.select_multiple_colors()\n>       value_count_before, value_count_after = page.delete_one_value_from_multiselect()\n\ntests/test_widgets.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/widgets_page.py:253: in delete_one_value_from_multiselect\n    self.find_element(self.locators.MULTISELECT_REMOVE_ITEM_ICON).click()\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f38cd9215b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x558e98fe91d3 \\\\u003Cunknown>\\\\n#21 0x558e98ff8f5c \\\\u003Cunknown>\\\\n#22 0x7f017d1e5144 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"css-xb97g8\">...</div> is not clickable at point (569, 857). Other element would receive the click: <div id=\"adplus-anchor\" data-google-query-id=\"CJXljoCd34gDFTEWigMdWjAS_A\">...</div>\nE         (Session info: chrome=129.0.6668.58)\nE       Stacktrace:\nE       #0 0x558e98ffa10a <unknown>\nE       #1 0x558e98ce05e0 <unknown>\nE       #2 0x558e98d36866 <unknown>\nE       #3 0x558e98d3478d <unknown>\nE       #4 0x558e98d32237 <unknown>\nE       #5 0x558e98d31646 <unknown>\nE       #6 0x558e98d24a98 <unknown>\nE       #7 0x558e98d54b22 <unknown>\nE       #8 0x558e98d24478 <unknown>\nE       #9 0x558e98d54cee <unknown>\nE       #10 0x558e98d73d7d <unknown>\nE       #11 0x558e98d548c3 <unknown>\nE       #12 0x558e98d226b3 <unknown>\nE       #13 0x558e98d2368e <unknown>\nE       #14 0x558e98fc4b0b <unknown>\nE       #15 0x558e98fc8a91 <unknown>\nE       #16 0x558e98fb1305 <unknown>\nE       #17 0x558e98fc9612 <unknown>\nE       #18 0x558e98f9646f <unknown>\nE       #19 0x558e98fe9008 <unknown>\nE       #20 0x558e98fe91d3 <unknown>\nE       #21 0x558e98ff8f5c <unknown>\nE       #22 0x7f017d1e5144 <unknown>\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Open https://demoqa.com/select-menu page","time":{"start":1727306192137,"stop":1727306193116,"duration":979},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enter some random colors (from the list) and press Enter","time":{"start":1727306193117,"stop":1727306193561,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Delete one value from multiselect field","time":{"start":1727306193561,"stop":1727306194644,"duration":1083},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"css-xb97g8\">...</div> is not clickable at point (569, 857). Other element would receive the click: <div id=\"adplus-anchor\" data-google-query-id=\"CJXljoCd34gDFTEWigMdWjAS_A\">...</div>\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x558e98ffa10a <unknown>\n#1 0x558e98ce05e0 <unknown>\n#2 0x558e98d36866 <unknown>\n#3 0x558e98d3478d <unknown>\n#4 0x558e98d32237 <unknown>\n#5 0x558e98d31646 <unknown>\n#6 0x558e98d24a98 <unknown>\n#7 0x558e98d54b22 <unknown>\n#8 0x558e98d24478 <unknown>\n#9 0x558e98d54cee <unknown>\n#10 0x558e98d73d7d <unknown>\n#11 0x558e98d548c3 <unknown>\n#12 0x558e98d226b3 <unknown>\n#13 0x558e98d2368e <unknown>\n#14 0x558e98fc4b0b <unknown>\n#15 0x558e98fc8a91 <unknown>\n#16 0x558e98fb1305 <unknown>\n#17 0x558e98fc9612 <unknown>\n#18 0x558e98f9646f <unknown>\n#19 0x558e98fe9008 <unknown>\n#20 0x558e98fe91d3 <unknown>\n#21 0x558e98ff8f5c <unknown>\n#22 0x7f017d1e5144 <unknown>\n\n","statusTrace":"  File \"/usr/local/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/test_project/pages/widgets_page.py\", line 253, in delete_one_value_from_multiselect\n    self.find_element(self.locators.MULTISELECT_REMOVE_ITEM_ICON).click()\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1727306196732,"stop":1727306196974,"duration":242},"status":"passed","steps":[],"attachments":[{"uid":"6ea305318e7c6943","name":"Screenshot 2024-09-25 23:16:36.894952","source":"6ea305318e7c6943.png","type":"image/png","size":357580}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Select Menu"},{"name":"suite","value":"Widgets"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestWidgets"},{"name":"host","value":"8e9b0438859b"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_widgets"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"c6114f8dbe785460","status":"passed","time":{"start":1727299760986,"stop":1727299762211,"duration":1225}}]},"tags":[]},"source":"3a720b95de8b4088.json","parameterValues":[]}