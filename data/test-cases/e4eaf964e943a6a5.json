{"uid":"e4eaf964e943a6a5","name":"test_select_items[grid]","fullName":"tests.test_interactions.TestSelectablePage#test_select_items","historyId":"037126c63f45173d9cec72b61ede73ee","time":{"start":1727306074545,"stop":1727306076550,"duration":2005},"description":"Can select items in the List/Grid","descriptionHtml":"<p>Can select items in the List/Grid</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"list-group-item list-group-item-action\">...</li> is not clickable at point (770, 834). Other element would receive the click: <div>...</div>\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x560a449ec10a <unknown>\n#1 0x560a446d25e0 <unknown>\n#2 0x560a44728866 <unknown>\n#3 0x560a4472678d <unknown>\n#4 0x560a44724237 <unknown>\n#5 0x560a44723646 <unknown>\n#6 0x560a44716a98 <unknown>\n#7 0x560a44746b22 <unknown>\n#8 0x560a44716478 <unknown>\n#9 0x560a44746cee <unknown>\n#10 0x560a44765d7d <unknown>\n#11 0x560a447468c3 <unknown>\n#12 0x560a447146b3 <unknown>\n#13 0x560a4471568e <unknown>\n#14 0x560a449b6b0b <unknown>\n#15 0x560a449baa91 <unknown>\n#16 0x560a449a3305 <unknown>\n#17 0x560a449bb612 <unknown>\n#18 0x560a4498846f <unknown>\n#19 0x560a449db008 <unknown>\n#20 0x560a449db1d3 <unknown>\n#21 0x560a449eaf5c <unknown>\n#22 0x7f9498ca9144 <unknown>","statusTrace":"self = <test_interactions.TestInteractions.TestSelectablePage object at 0x7f38cd8d3650>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"336baa23fc094bc333971c9f80c7bd45\")>\ntab = 'grid'\n\n    @allure.description('Can select items in the List/Grid')\n    @pytest.mark.parametrize('tab', ['list', 'grid'])\n    def test_select_items(self, driver, tab):\n        page = SelectablePage(driver, URL.SELECTABLE)\n        page.open_page()\n    \n>       items_to_select, active_items = page.select_items(tab)\n\ntests/test_interactions.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/interactions_page.py:53: in select_items\n    item.click()\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f38cd91ac30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x560a449db1d3 \\\\u003Cunknown>\\\\n#21 0x560a449eaf5c \\\\u003Cunknown>\\\\n#22 0x7f9498ca9144 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"list-group-item list-group-item-action\">...</li> is not clickable at point (770, 834). Other element would receive the click: <div>...</div>\nE         (Session info: chrome=129.0.6668.58)\nE       Stacktrace:\nE       #0 0x560a449ec10a <unknown>\nE       #1 0x560a446d25e0 <unknown>\nE       #2 0x560a44728866 <unknown>\nE       #3 0x560a4472678d <unknown>\nE       #4 0x560a44724237 <unknown>\nE       #5 0x560a44723646 <unknown>\nE       #6 0x560a44716a98 <unknown>\nE       #7 0x560a44746b22 <unknown>\nE       #8 0x560a44716478 <unknown>\nE       #9 0x560a44746cee <unknown>\nE       #10 0x560a44765d7d <unknown>\nE       #11 0x560a447468c3 <unknown>\nE       #12 0x560a447146b3 <unknown>\nE       #13 0x560a4471568e <unknown>\nE       #14 0x560a449b6b0b <unknown>\nE       #15 0x560a449baa91 <unknown>\nE       #16 0x560a449a3305 <unknown>\nE       #17 0x560a449bb612 <unknown>\nE       #18 0x560a4498846f <unknown>\nE       #19 0x560a449db008 <unknown>\nE       #20 0x560a449db1d3 <unknown>\nE       #21 0x560a449eaf5c <unknown>\nE       #22 0x7f9498ca9144 <unknown>\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1727305957782,"stop":1727305957807,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1727306071878,"stop":1727306072216,"duration":338},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Can select items in the List/Grid","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"list-group-item list-group-item-action\">...</li> is not clickable at point (770, 834). Other element would receive the click: <div>...</div>\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x560a449ec10a <unknown>\n#1 0x560a446d25e0 <unknown>\n#2 0x560a44728866 <unknown>\n#3 0x560a4472678d <unknown>\n#4 0x560a44724237 <unknown>\n#5 0x560a44723646 <unknown>\n#6 0x560a44716a98 <unknown>\n#7 0x560a44746b22 <unknown>\n#8 0x560a44716478 <unknown>\n#9 0x560a44746cee <unknown>\n#10 0x560a44765d7d <unknown>\n#11 0x560a447468c3 <unknown>\n#12 0x560a447146b3 <unknown>\n#13 0x560a4471568e <unknown>\n#14 0x560a449b6b0b <unknown>\n#15 0x560a449baa91 <unknown>\n#16 0x560a449a3305 <unknown>\n#17 0x560a449bb612 <unknown>\n#18 0x560a4498846f <unknown>\n#19 0x560a449db008 <unknown>\n#20 0x560a449db1d3 <unknown>\n#21 0x560a449eaf5c <unknown>\n#22 0x7f9498ca9144 <unknown>","statusTrace":"self = <test_interactions.TestInteractions.TestSelectablePage object at 0x7f38cd8d3650>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"336baa23fc094bc333971c9f80c7bd45\")>\ntab = 'grid'\n\n    @allure.description('Can select items in the List/Grid')\n    @pytest.mark.parametrize('tab', ['list', 'grid'])\n    def test_select_items(self, driver, tab):\n        page = SelectablePage(driver, URL.SELECTABLE)\n        page.open_page()\n    \n>       items_to_select, active_items = page.select_items(tab)\n\ntests/test_interactions.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/interactions_page.py:53: in select_items\n    item.click()\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f38cd91ac30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x560a449db1d3 \\\\u003Cunknown>\\\\n#21 0x560a449eaf5c \\\\u003Cunknown>\\\\n#22 0x7f9498ca9144 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"list-group-item list-group-item-action\">...</li> is not clickable at point (770, 834). Other element would receive the click: <div>...</div>\nE         (Session info: chrome=129.0.6668.58)\nE       Stacktrace:\nE       #0 0x560a449ec10a <unknown>\nE       #1 0x560a446d25e0 <unknown>\nE       #2 0x560a44728866 <unknown>\nE       #3 0x560a4472678d <unknown>\nE       #4 0x560a44724237 <unknown>\nE       #5 0x560a44723646 <unknown>\nE       #6 0x560a44716a98 <unknown>\nE       #7 0x560a44746b22 <unknown>\nE       #8 0x560a44716478 <unknown>\nE       #9 0x560a44746cee <unknown>\nE       #10 0x560a44765d7d <unknown>\nE       #11 0x560a447468c3 <unknown>\nE       #12 0x560a447146b3 <unknown>\nE       #13 0x560a4471568e <unknown>\nE       #14 0x560a449b6b0b <unknown>\nE       #15 0x560a449baa91 <unknown>\nE       #16 0x560a449a3305 <unknown>\nE       #17 0x560a449bb612 <unknown>\nE       #18 0x560a4498846f <unknown>\nE       #19 0x560a449db008 <unknown>\nE       #20 0x560a449db1d3 <unknown>\nE       #21 0x560a449eaf5c <unknown>\nE       #22 0x7f9498ca9144 <unknown>\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Open https://demoqa.com/selectable page","time":{"start":1727306074546,"stop":1727306075023,"duration":477},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Select the random items in the List/Grid","time":{"start":1727306075023,"stop":1727306076549,"duration":1526},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"list-group-item list-group-item-action\">...</li> is not clickable at point (770, 834). Other element would receive the click: <div>...</div>\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n#0 0x560a449ec10a <unknown>\n#1 0x560a446d25e0 <unknown>\n#2 0x560a44728866 <unknown>\n#3 0x560a4472678d <unknown>\n#4 0x560a44724237 <unknown>\n#5 0x560a44723646 <unknown>\n#6 0x560a44716a98 <unknown>\n#7 0x560a44746b22 <unknown>\n#8 0x560a44716478 <unknown>\n#9 0x560a44746cee <unknown>\n#10 0x560a44765d7d <unknown>\n#11 0x560a447468c3 <unknown>\n#12 0x560a447146b3 <unknown>\n#13 0x560a4471568e <unknown>\n#14 0x560a449b6b0b <unknown>\n#15 0x560a449baa91 <unknown>\n#16 0x560a449a3305 <unknown>\n#17 0x560a449bb612 <unknown>\n#18 0x560a4498846f <unknown>\n#19 0x560a449db008 <unknown>\n#20 0x560a449db1d3 <unknown>\n#21 0x560a449eaf5c <unknown>\n#22 0x7f9498ca9144 <unknown>\n\n","statusTrace":"  File \"/usr/local/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/test_project/pages/interactions_page.py\", line 53, in select_items\n    item.click()\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"tab","value":"'grid'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1727306081162,"stop":1727306081396,"duration":234},"status":"passed","steps":[],"attachments":[{"uid":"bfe86f7395dbc486","name":"Screenshot 2024-09-25 23:14:41.317847","source":"bfe86f7395dbc486.png","type":"image/png","size":359174}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"suite","value":"Interactions"},{"name":"feature","value":"Selectable elements"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestInteractions"},{"name":"host","value":"8e9b0438859b"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_interactions"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"tab","value":"'grid'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"1dea3a9bd04d16ef","status":"passed","time":{"start":1727299634621,"stop":1727299635961,"duration":1340}},{"uid":"5697cfd702dc9a73","status":"passed","time":{"start":1727217875349,"stop":1727217876768,"duration":1419}}]},"tags":[]},"source":"e4eaf964e943a6a5.json","parameterValues":["'grid'"]}